{"version":3,"sources":["components/BurgerBuild.js","components/OrderDetail.js","components/Burger.js","App.js","serviceWorker.js","index.js"],"names":["BurgerBuild","props","addRemoveIngredient","action","ingredient","stateValue","state","lettuce","tomato","cheese","meat","setState","burgerContent","burger","i","push","className","length","dish","this","onClick","add","Component","OrderDetail","rowData","rows","dishes","name","ingredients","dishesCount","title","data","columns","field","back","Burger","addToCart","isBurgerBuild","isOrder","buildBurger","dishesDetail","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcd36d41.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './BurgerStyle.css';\n\nexport default class BurgerBuild extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            lettuce: 0,\n            tomato: 0,\n            cheese: 0,\n            meat: 0\n        }\n    }\n\n\n    addRemoveIngredient = (action, ingredient) => {\n        let {\n            lettuce,\n            tomato,\n            cheese,\n            meat\n        } = this.state;\n\n        let stateValue;\n        switch(ingredient){\n            case 'lettuce':{\n                stateValue = lettuce;\n                break;\n            }\n            case 'tomato':{\n                stateValue = tomato;\n                break;\n            }\n            case 'cheese':{\n                stateValue = cheese;\n                break;\n            }\n            case 'meat':{\n                stateValue = meat;\n                break;\n            }\n            default: break;\n        }\n        if(action === 'add'){\n            stateValue = stateValue + 1;\n        }else{\n            stateValue = stateValue - 1;\n        }\n        this.setState({\n            [ingredient]: stateValue >= 0 ? stateValue : 0\n        });\n    }\n\n    burgerContent = () => {\n        let {\n            lettuce,\n            tomato,\n            cheese,\n            meat\n        } = this.state;\n        let burger = [];\n\n        // outputting the lettuce\n        for (let i = 0; i < lettuce; i++){\n            burger.push(<div key={burger.length} className=\"lettuseSide\"></div>);\n        }\n        // outputting the tomato\n        for (let i = 0; i < tomato; i++){\n            burger.push(<div key={burger.length} className=\"tomatoSide\"></div>);\n        }\n        // outputting the cheese\n        for (let i = 0; i < cheese; i++){\n            burger.push(<div key={burger.length} className=\"cheeseSide\"></div>);\n        }\n        // outputting the meat\n        for (let i = 0; i < meat; i++){\n            burger.push(<div key={burger.length} className=\"meatSide\"></div>);\n        }\n        if(burger.length === 0)\n            burger.push(<p key=\"0\">Please start adding ingredients!</p>);\n        return burger;\n    }\n\n    render(){\n        let dish = {\n            lettuce: this.state.lettuce,\n            tomato: this.state.tomato,\n            cheese: this.state.cheese,\n            meat: this.state.meat \n        }\n        return (\n            <>\n                <div className=\"burgerIngredients\">\n                    <div className=\"topSide\"></div>\n                    {this.burgerContent()}\n                    <div className=\"bottomSide\"></div>\n                </div>\n                <div className=\"ingredientsBlock\">\n                    <p>Lettuce</p>\n                    <div className=\"ingrBtns\">\n                        <button className=\"ingrBtn\" onClick={() => this.addRemoveIngredient('add','lettuce')}>Add</button>\n                        <button className=\"ingrBtn\" onClick={() => this.addRemoveIngredient('remove','lettuce')}>Remove</button>\n                    </div>\n                    <p>TOMATO</p>\n                    <div className=\"ingrBtns\">\n                        <button className=\"ingrBtn\" onClick={() => this.addRemoveIngredient('add','tomato')}>Add</button>\n                        <button className=\"ingrBtn\" onClick={() => this.addRemoveIngredient('remove','tomato')}>Remove</button>\n                    </div>\n                    <p>CHEESE</p>\n                    <div className=\"ingrBtns\">\n                        <button className=\"ingrBtn\" onClick={() => this.addRemoveIngredient('add','cheese')}>Add</button>\n                        <button className=\"ingrBtn\" onClick={() => this.addRemoveIngredient('remove','cheese')}>Remove</button>\n                    </div>\n                    <p>MEAT</p>\n                    <div className=\"ingrBtns\">\n                        <button className=\"ingrBtn\" onClick={() => this.addRemoveIngredient('add','meat')}>Add</button>\n                        <button className=\"ingrBtn\" onClick={() => this.addRemoveIngredient('remove','meat')}>Remove</button>\n                    </div>\n                </div>\n                <button onClick={() => this.props.add(dish)}> Add To Cart </button>\n            </>\n        );\n    }\n}","import React, { Component } from 'react';\nimport MaterialTable from \"material-table\";\n\nexport default class OrderDetail extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      dishes: this.props.dishes\n    }\n  }\n\n  rowData = () => {\n    let rows = [];\n    let dishes = this.state.dishes;\n    for (let i = 0; i < dishes.length; i++) {\n      rows.push({name: `Burger-${i+1}`, ingredients: `Lettuce: ${dishes[i].lettuce}x | Cheese: ${dishes[i].cheese}x | Tomato: ${dishes[i].tomato}x | Meat: ${dishes[i].meat}x`})\n    }\n    return rows;\n  }\n\n  render(){\n    let dishesCount = this.state.dishes.length;\n\n    const columns = [\n      {\n        title: \"Name\",\n        field: \"name\",\n      },\n      {\n        title: \"Ingredients\",\n        field: \"ingredients\",\n      }\n    ];\n\n    return (\n      <>\n        <h4> Order Details </h4>\n        <p> There are {dishesCount} dishes in total</p> \n        <MaterialTable title=\"Order Details\" data={this.rowData()} columns={columns} />\n        <button onClick={() => this.props.back()}> Order More </button>\n      </>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './BurgerStyle.css';\nimport BurgerBuild from './BurgerBuild.js';\nimport OrderDetail from './OrderDetail.js';\n\nexport default class Burger extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      dishes: [],\n      isBurgerBuild: false,\n      isOrder: true\n    }\n  }\n\n  addToCart = (dish) => {\n    this.state.dishes.push(dish)\n    this.setState({\n      ...this.state,\n      isBurgerBuild: false,\n      isOrder: true\n    })\n  }\n\n  buildBurger = () => {\n    this.setState({\n      ...this.state,\n      isBurgerBuild: true,\n      isOrder: false\n    })\n  }\n\n  render(){\n    let dishesDetail = {\n      back: this.buildBurger,\n      dishes: this.state.dishes\n    }\n    return (\n      <>\n        {this.state.isBurgerBuild && <BurgerBuild add={this.addToCart} />}\n        {this.state.isOrder && <OrderDetail {...dishesDetail} />}\n      </>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport Burger from './components/Burger';\n\nfunction App() {\n  return (\n    <div className=\"burgerContent\">\n      <Burger />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}